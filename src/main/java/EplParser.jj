/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\EplParser.jj */
/*@egen*/
options {
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;                                                                                                             
}

PARSER_BEGIN(EplParser)
package org.epl.parser;

public class EplParser/*@bgen(jjtree)*/implements EplParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTEplParserState jjtree = new JJTEplParserState();

/*@egen*/
	public static boolean debug = Boolean.getBoolean("epl.debug");
	
    public static void main(String args[]) throws ParseException {
        EplParser parser = new EplParser(System.in);
        /* This is a call to any nonterminal; use the start symbol */
        parser.S();
    }
}

PARSER_END(EplParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

/* Reserved words first, so they're identified as such (and not IDs) */
TOKEN :
{
  < EXECUTE:   "execute" >
| < LISTENER:  "listener" >
| < CONDITION: "condition" >
| < ACTION:    "action" >
| < FOREACH:   "foreach" >
| < BLOCK:     "block" >
| < BROKER:    "broker" >
| < PRINT:     "print" >
| < FOR:       "for" >
| < IN:        "in" >
| < IS:        "is" >
| < WHEN:      "when" >
| < DO:        "do" >
| < IF:        "if" >
| < WITHIN:    "within" >
| < OR:		   "or" >
| < AND:	   "and" >
| < NOT:	   "not" >
| < AS:	       "as" >
}

TOKEN :
{
  < ID: ["A"-"Z","a"-"z"] ( ["A"-"Z","a"-"z","0"-"9"] )* > 
| < STRING: "\"" (~["\""])* "\"" >
| < DIGITS: ["1"-"9"] ( ["0"-"9"] )* >
}

/* This allows a comment anywhere on the line, not just the first column
 * The comment continues to the end of the line
 */
/* SPECIAL_TOKENs are skipped (ignored) but are capable of being retrieved 
 * That's how the Java grammar does comments */
SPECIAL_TOKEN : /* COMMENTS */
{
  <LINE_COMMENT: "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}

/* Here are the method definitions */

/* Start symbol */
void S() :
{/*@bgen(jjtree) S */
  ASTS jjtn000 = new ASTS(JJTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) S */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering S() method"); }
    ( Stmt() ";" )+ <EOF>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving S() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmt() :
{/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Stmt() method"); }
    Print() 
  | Execute()
  | Foreach() 
  | If()
  | Listener() 
  | Broker() 
  | Condition() 
  | Action() 
  | Situation()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving Stmt() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Execute() :
{/*@bgen(jjtree) Execute */
  ASTExecute jjtn000 = new ASTExecute(JJTEXECUTE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2; }
{/*@bgen(jjtree) Execute */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Execute() method"); }
    "execute" t1 = <ID> { jjtn000.returnVar = t1.image; }
    "as" t2 = <STRING> { jjtn000.literalString = t2.image; } [ Params() ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Execute() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Param() :
{/*@bgen(jjtree) Param */
  ASTParam jjtn000 = new ASTParam(JJTPARAM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; }
{/*@bgen(jjtree) Param */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Param() method"); }
    VarExpr()
    | t1 = <STRING> { jjtn000.literalString = t1.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/

    { if (debug) System.out.println("Leaving Param() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Params() :
{/*@bgen(jjtree) Params */
  ASTParams jjtn000 = new ASTParams(JJTPARAMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Params */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Params() method"); }
    ( Param() )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Params() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Listener() :
{/*@bgen(jjtree) Listener */
  ASTListener jjtn000 = new ASTListener(JJTLISTENER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2, t3; }
{/*@bgen(jjtree) Listener */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Listener() method"); }
    "listener" t1 = <ID> { jjtn000.name = t1.image; } 
    "for" t2 = <STRING> { jjtn000.eventType = t2.image; } 
    "in" t3 = <ID> {jjtn000.broker = t3.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Listener() method"); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Broker() :
{/*@bgen(jjtree) Broker */
  ASTBroker jjtn000 = new ASTBroker(JJTBROKER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2; }
{/*@bgen(jjtree) Broker */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Broker() method"); }
    "broker" t1 = <ID> { jjtn000.name = t1.image; } 
    "is" t2 = <STRING> { jjtn000.connectString = t2.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Broker() method"); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Print() :
{/*@bgen(jjtree) Print */
  ASTPrint jjtn000 = new ASTPrint(JJTPRINT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Print */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Print() method"); }
    "print" ( PrintCatenation() )+/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Print() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void PrintCatenation() :
{/*@bgen(jjtree) PrintCatenation */
  ASTPrintCatenation jjtn000 = new ASTPrintCatenation(JJTPRINTCATENATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) PrintCatenation */
        try {
/*@egen*/
	PrintExpr() [ ( "+" PrintExpr() )+ ]/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void PrintExpr() :
{/*@bgen(jjtree) PrintExpr */
  ASTPrintExpr jjtn000 = new ASTPrintExpr(JJTPRINTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; }
{/*@bgen(jjtree) PrintExpr */
   try {
/*@egen*/
   VarExpr()
 | t1 = <STRING>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ { jjtn000.literalString = t1.image; }/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
/*@egen*/
}

void Expr() :
{/*@bgen(jjtree) Expr */
  ASTExpr jjtn000 = new ASTExpr(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Expr */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Expr() method"); }  
  VarExpr() [ Conditional() ]
  | NotConditional()
  | "(" Expr() ")"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Expr() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void VarExpr() :
{/*@bgen(jjtree) VarExpr */
  ASTVarExpr jjtn000 = new ASTVarExpr(JJTVAREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2; }
{/*@bgen(jjtree) VarExpr */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering VarExpr() method"); }
  t1 = <ID> { jjtn000.name = t1.image; } 
  [ "." t2 = <ID> { jjtn000.member = t2.image; } ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving VarExpr() method"); }/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Condition() :
{/*@bgen(jjtree) Condition */
  ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1, t2; }
{/*@bgen(jjtree) Condition */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Condition() method"); }
    "condition" t1 = <ID> { jjtn000.name = t1.image; }
    "is" Expr()
    "within" t2 = <DIGITS> { jjtn000.timeout = t2.image; }/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Condition() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Conditional() :
{/*@bgen(jjtree) Conditional */
  ASTConditional jjtn000 = new ASTConditional(JJTCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Conditional */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Conditional() method"); }
    OrConditional() 
  | 
  	AndConditional()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    { if (debug) System.out.println("Leaving Conditional() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void NotConditional() :
{/*@bgen(jjtree) NotConditional */
  ASTNotConditional jjtn000 = new ASTNotConditional(JJTNOTCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) NotConditional */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering NotConditional() method"); }
   "not" Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving NotConditional() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void OrConditional() :
{/*@bgen(jjtree) OrConditional */
  ASTOrConditional jjtn000 = new ASTOrConditional(JJTORCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OrConditional */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering OrConditional() method"); }
   "or" Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving OrConditional() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void AndConditional() :
{/*@bgen(jjtree) AndConditional */
  ASTAndConditional jjtn000 = new ASTAndConditional(JJTANDCONDITIONAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AndConditional */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering AndConditional() method"); }
    "and" Expr()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving AndConditional() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/* Change:  allow empty block; i.e. {} */
void Block() :
{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Block */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Block() method"); }
    "{" ( Stmt() ";" )+ "}"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving Block() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Action() :
{/*@bgen(jjtree) Action */
  ASTAction jjtn000 = new ASTAction(JJTACTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; }
{/*@bgen(jjtree) Action */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Action() method"); }
    "action" t1 = <ID> { jjtn000.name = t1.image; } 
    "is" Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving Action() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void List() :
{/*@bgen(jjtree) List */
  ASTList jjtn000 = new ASTList(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) List */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering List() method"); }
    VarExpr() [ ( "," VarExpr() )+ ]/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving List() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Situation() :
{/*@bgen(jjtree) Situation */
  ASTSituation jjtn000 = new ASTSituation(JJTSITUATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; }
{/*@bgen(jjtree) Situation */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Situation() method"); }
    "when" t1 = <ID> { jjtn000.condition = t1.image; } 
    "do" List()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving Situation() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Foreach() :
{/*@bgen(jjtree) Foreach */
  ASTForeach jjtn000 = new ASTForeach(JJTFOREACH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t1; }
{/*@bgen(jjtree) Foreach */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering Foreach() method"); }
    "foreach" t1 = <ID> { jjtn000.forEachContainedThing = t1.image; }
    "in" VarExpr()
	Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving Foreach() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void If() :
{/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
    try {
/*@egen*/
    { if (debug) System.out.println("Entering If() method"); }
    "if" Expr() Block()/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/ 
    { if (debug) System.out.println("Leaving If() method"); }/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}
