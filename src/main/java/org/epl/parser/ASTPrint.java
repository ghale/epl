package org.epl.parser;

/* Generated By:JJTree: Do not edit this line. ASTPrint.java */

/**
 * Represents the Print production in the EPL grammar:
 * <pre>
 * Print ::= "print" ( {@link ASTPrintCatenation PrintCatenation} )+
 * </pre>
 * An example EPL print statement:
 * <p>
 * <code>print "Some string" + "some other string" + event.text;</code>
 * @see ASTPrintCatenation
 */
public class ASTPrint extends SimpleNode {
  public ASTPrint(int id) {
    super(id);
  }

  public ASTPrint(EplParser p, int id) {
    super(p, id);
  }

  /**
   * This is the main interpretation method.  It evaluates all its ASTPrintCatenation child nodes, and 
   * sends the result to the console.  The {@link ASTPrintCatenation} nodes provide the method interpretAsString(),
   * the results of which are concatenated to produce the result of the Print statement.
   */
  
  public void interpret() {
    super.interpret();		
	
    StringBuilder stringBuilder = new StringBuilder();
    
    // the Print() production has one or more PrintCatenation() children
    int i, k = jjtGetNumChildren();

    for (i = 0; i < k; i++)
	    stringBuilder.append(((ASTPrintCatenation)jjtGetChild(i)).interpretAsString());

    // at this point, stringBuffer should be fully populated
    System.out.println(stringBuilder);
  }

}
