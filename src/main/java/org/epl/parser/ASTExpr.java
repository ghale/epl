package org.epl.parser;
/* Generated By:JJTree: Do not edit this line. ASTExpr.java */

import java.util.HashSet;

import org.epl.core.Condition;

/**
 * Represents the Expr production in the EPL grammar.
 * <pre>
 * Expr ::= VarExpr [ {@link ASTConditional Conditional} ]
 *        | {@link ASTNotConditional NotConditional}
 *        | "(" {@link ASTExpr Expr} ")"
 * </pre>
 * @see ASTConditional
 * @see ASTNotConditional
 * @see ASTExpr
 */
public class ASTExpr extends SimpleNode implements Condition {
  public ASTExpr(int id) {
    super(id);
  }

  public ASTExpr(EplParser p, int id) {
    super(p, id);
  }

	
	public Boolean isTriggered() {
		Boolean isTriggered;
		// If this expression has two children (AndConditional, OrConditional, etc)
		// evaluate the first child and place the result on the stack.
		if (jjtGetNumChildren() > 1) {
			stack.push(((Condition)jjtGetChild(0)).isTriggered());
			isTriggered = ((Condition)jjtGetChild(1)).isTriggered();
		} else {
			// Otherwise just evaluate the one child
			isTriggered = ((Condition)jjtGetChild(0)).isTriggered();
		}
		return isTriggered;
	}

	
	public void interpret() {
		super.interpret();
		// Expr() has either:
		//   VarExpr() with an optional Conditional()
		//   NotConditional()
		//   ( Expr )
		// The terminal <ID> will be in VarExpr
		// any child should be able to return an Set of <ID>
		if (jjtGetNumChildren() > 1) {
			jjtGetChild(0).interpret();
			jjtGetChild(1).interpret();
		} else {
			jjtGetChild(0).interpret();
		}
		if (! stack.isEmpty()) stack.pop();
	}

	public HashSet<String> getEventSet() {
		// Expr() has either:
		//   VarExpr() with an optional Conditional()
		//   NotConditional()
		//   ( Expr )
		// The terminal <ID> will be in VarExpr
		// any child should be able to return an Set of <ID>

		HashSet<String> eventSet = new HashSet<String>();
		eventSet.addAll(((Condition)jjtGetChild(0)).getEventSet());
		if (jjtGetNumChildren() > 1)
			eventSet.addAll(((Condition)jjtGetChild(1)).getEventSet());
		return eventSet;
	}

	/* MPickering an Expr() should be capable of being evaluated as a Boolean value; 
	 * is isTriggered() the mechanism to do this, or is there a better way? */
	
}
