package org.epl.parser;

import java.util.HashSet;
/* Generated By:JJTree: Do not edit this line. ASTOrConditional.java */

import org.epl.core.Condition;

/**
 * Represents the OrConditional production in the EPL grammar.
 * <pre>
 * AndConditional ::= "or" {@link ASTExpr Expr}
 * </pre>  
 * 
 * @see ASTExpr
 */
public class ASTOrConditional extends SimpleNode implements Condition {
  public ASTOrConditional(int id) {
    super(id);
  }

  public ASTOrConditional(EplParser p, int id) {
    super(p, id);
  }

	
	public void interpret() {
		super.interpret();		
		jjtGetChild(0).interpret();
	}

	
	public Boolean isTriggered() {
		// Since the OrConditional has two arguments, the left hand side should already 
		// be on the stack.
		Boolean lhs = (Boolean) stack.pop();
		// Evaluate the right hand side
		Boolean rhs = ((Condition)jjtGetChild(0)).isTriggered();
		// Logically OR the results and return the result
		return new Boolean(lhs.booleanValue() | rhs.booleanValue());
	}

  
	/* MPickering */
	public HashSet<String> getEventSet() {
		// OrConditional has a single Expr() child
		HashSet<String> eventSet = new HashSet<String>();
		eventSet.addAll(((Condition)jjtGetChild(0)).getEventSet());
		return eventSet;
	}  
}
