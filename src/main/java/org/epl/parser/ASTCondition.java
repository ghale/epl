package org.epl.parser;

import java.util.HashSet;
/* Generated By:JJTree: Do not edit this line. ASTCondition.java */

import org.epl.core.Condition;

/**
 * Represents the Condition production in the EPL grammar.
 * <pre>
 * Condition ::= "condition" &lt;ID&gt; "is" {@link ASTExpr Expr} "within" &lt;DIGITS&gt;
 * </pre>
 */
public class ASTCondition extends SimpleNode implements Condition {
	String name;
	String timeout;
	public HashSet<String> events = new HashSet<String>();
	
  public ASTCondition(int id) {
    super(id);
  }

  public ASTCondition(EplParser p, int id) {
    super(p, id);
  }

	
	public void interpret() {
		super.interpret();
		// Set the current condition being evaluated so children can retrieve
		// the timeout and condition name
		currentTimeout = Long.valueOf(timeout);
		currentCondition.set(name);
		// Evaluate the child
		Node child = jjtGetChild(0);
		child.interpret();	
		// Register this condition 
		bus.registerCondition(name, this);
		symtable.put(name, this);
		// Unset the current condition
		currentTimeout = null;
		currentCondition.set(null);

		// For debugging purposes
		events = ((Condition)child).getEventSet();
		if (EplParser.debug) System.out.println("ASTCondition() " + name + " event set is:  " + events);
	}

	
	public Boolean isTriggered() {
		// Save the outer condition being evaluated
		String last = currentCondition.get();
		// Set the current condition being evaluated
		currentCondition.set(name);
		// Get the value of the child condition
		Boolean isTriggered = ((Condition) jjtGetChild(0)).isTriggered();
		// Reset the outer condition
		currentCondition.set(last);
		
		// If this is the outer condition, set the event set so it can be 
		// accessed by actions
		if (last == null) {
			eventset.set(events);
		}
		
		return isTriggered;
	}

	public HashSet<String> getEventSet() {
		return events;
	}
	
}
