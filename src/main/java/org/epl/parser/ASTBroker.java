package org.epl.parser;

import java.util.Hashtable;

import org.epl.core.Broker;
import org.epl.core.BrokerFactory;
import org.epl.filesystem.FileSystemBrokerFactory;
import org.epl.jmx.JMXBrokerFactory;


/* Generated By:JJTree: Do not edit this line. ASTBroker.java */

/**
 * Represents the Broker production in the EPL grammar.
 * <pre>
 * Broker ::= "broker" &lt;ID&gt; "is" &lt;STRING&gt;
 * </pre>
 */
public class ASTBroker extends SimpleNode {
	String name;
	String connectString;
	
	// This defines the possible types of brokers available and the factories that will 
	// generate them.  Only JMX and FileySystem brokers currently exist.
	private static Hashtable<String, BrokerFactory> brokerFactories = new Hashtable<String, BrokerFactory>();
	static {
			brokerFactories.put("jmx", new JMXBrokerFactory());
			brokerFactories.put("file", new FileSystemBrokerFactory());
	}
	
  public ASTBroker(int id) {
    super(id);
  }

  public ASTBroker(EplParser p, int id) {
    super(p, id);
  }

	public void interpret() {
		super.interpret();
		// Remove the quotations from the connection string
		connectString = connectString.replace("\"", "");
		// Split the string into the identifier for the broker type and
		// the connection data.
		String[] components = connectString.split("://");
		// Get a broker factory and generate a broker
		BrokerFactory factory = brokerFactories.get(components[0]);
		final Broker broker = factory.getBroker(components[1]);
		broker.setName(name);
		// Register the broker and put it in the symtable
		bus.registerBroker(name, broker);
		symtable.put(name, broker);
		// Connect the broker
		broker.connect();
	}

}
