package org.epl.parser;

import java.util.HashSet;
/* Generated By:JJTree: Do not edit this line. ASTConditional.java */

import org.epl.core.Condition;

/**
 * Represents the Conditional production in the EPL grammar.
 * <pre>
 * Conditional ::= {@link ASTOrConditional OrConditional}
 *               | {@link ASTAndConditional AndConditional}
 * </pre>
 * @see ASTOrConditional
 * @see ASTAndConditional
 */
public class ASTConditional extends SimpleNode implements Condition {
  public ASTConditional(int id) {
    super(id);
  }

  public ASTConditional(EplParser p, int id) {
    super(p, id);
  }

	
	public void interpret() {
		super.interpret();
		jjtGetChild(0).interpret();
	}

	// This is just an outer place-holder for conditional-type nodes
	public Boolean isTriggered() {
		return ((Condition) jjtGetChild(0)).isTriggered();
	}  
	
	public HashSet<String> getEventSet() {
		// Conditional has either a single OrConditional() or a single AndConditional() child
		HashSet<String> eventSet = new HashSet<String>();
		eventSet.addAll(((Condition)jjtGetChild(0)).getEventSet());
		return eventSet;
	}  
}
