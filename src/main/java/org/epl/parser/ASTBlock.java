package org.epl.parser;

/* Generated By:JJTree: Do not edit this line. ASTBlock.java */

/**
 * Represents the Block production in the EPL grammar.
 * <pre>
 * Block ::= "{" ( {@link ASTStmt Stmt} ";" )+ "}"
 * </pre> 
 * 
 * @see ASTStmt
 */
public class ASTBlock extends SimpleNode {
  public ASTBlock(int id) {
    super(id);
  }

  public ASTBlock(EplParser p, int id) {
    super(p, id);
  }

  /**
   * Interpret all the {@link ASTStmt} children (that is, all the EPL statements) contained in a Block
   */
  public void interpret() {
      super.interpret();
	  
      symtable.pushScope();
      
      // Block() contains curly braces, containing one or more of Stmt()s; this makes it nearly identical to S()
      // Block() will be a child of Foreach(), If(), or Action(); this can be found with jjtGetParent()
      // The block will need to reference a list of events, but this will be part of the Foreach() or If()
	  int i, k = jjtGetNumChildren();
      int totalEvents = 1;
      if ((jjtGetParent() instanceof ASTForeach) || (jjtGetParent() instanceof ASTIf)) {
          //totalEvents = jjtGetParent().getEvents().count;    	  
      }
	  
      
	  // do this for each item in the parent's event list
	  for (int thisEvent = 0; thisEvent < totalEvents; thisEvent++) {
	      for (i = 0; i < k; i++)
	          jjtGetChild(i).interpret();
	  }
	  
	  symtable.popScope();

	}
}
