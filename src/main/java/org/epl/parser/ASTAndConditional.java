package org.epl.parser;

import java.util.HashSet;

import org.epl.core.Condition;
/* Generated By:JJTree: Do not edit this line. ASTAndConditional.java */
/**
 * Represents the AndConditional production in the EPL grammar.
 * <pre>
 * AndConditional ::= "and" {@link ASTExpr Expr}
 * </pre>  
 * 
 * @see ASTExpr
 */

public class ASTAndConditional extends SimpleNode implements Condition {
  public ASTAndConditional(int id) {
    super(id);
  }

  public ASTAndConditional(EplParser p, int id) {
    super(p, id);
  }

	public void interpret() {
		super.interpret();
		jjtGetChild(0).interpret();
	}

	public Boolean isTriggered() {
		// Since this is a two-argument condition, the left hand side should
		// have been evaluated first and the result should be sitting on the
		// stack.
		Boolean lhs = (Boolean) stack.pop();
		// Evaluate the right hand side
		Boolean rhs = ((Condition)jjtGetChild(0)).isTriggered();
		// And the values together and return the result
		return new Boolean(lhs.booleanValue() & rhs.booleanValue());
	}
	
	public HashSet<String> getEventSet() {
		// AndConditional has a single Expr() child
		HashSet<String> eventSet = new HashSet<String>();
		eventSet.addAll(((Condition)jjtGetChild(0)).getEventSet());
		return eventSet;
	}
}
